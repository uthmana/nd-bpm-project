generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL")
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String       @id @default(uuid())
  name            String
  email           String?      @unique
  password        String?
  role            String       @default("NORMAL")
  status          String       @default("ACTIVE")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  token           String?      @unique
  tokenExpiryDate DateTime?
  address         Address?
  contactInfo     ContactInfo?

  @@map("users")
}

model Address {
  id      String  @id @default(cuid())
  street  String
  city    String
  state   String
  zipCode String
  userId  String? @unique @default(cuid())
  user    User?   @relation(fields: [userId], references: [id])
}

model ContactInfo {
  id     String @id @default(cuid())
  phone  String
  email  String
  userId String @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
}

model Customer {
  id            String    @id @default(uuid())
  code          String?
  cardType      CardType? @default(ALICI_SATICI)
  taxNo         String?
  company_name  String?
  address       String?
  postalCode    String?
  phoneNumber   String?
  phoneNumber2  String?
  tax_Office    String?
  taxOfficeCode String?
  email         String?   @unique
  email_2       String?
  rep_name      String
  currency      Currency? @default(TL)
  country_code  String
  province_code String
  district_code String
  definition    String?
  Offers        Offer[]

  @@map("customers")
}

model Stock {
  id              String    @id @default(uuid())
  product_code    String
  product_name    String
  product_barcode String?
  description     String?
  main_group      String?
  group1          String?
  group2          String?
  inventory       Int?
  unit            String?
  current_price   String
  curency         String
  brand           String?
  date            DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  image           String?
}

model Offer {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  status     OfferStatus @default(PENDING)
  customerId String
  Customer   Customer    @relation(fields: [customerId], references: [id])
}

model Fault {
  id                         String    @id @default(uuid())
  CustomerName               String
  TraceabilityCode           String
  ArrivalDate                DateTime
  Product                    String
  Quantity                   Int
  ProductCode                String
  ProductBatchNumber         String
  Application                String?
  Standard                   String?
  Color                      String?
  FaultDescription           String
  SuperUserID                String
  SuperUserConfirmation      Boolean
  ConfirmationEvidence       String?
  TechnicalDrawingAttachment String?
  InvoiceDate                DateTime?
  CoatingControl             Boolean?
  MixedMaterial              Boolean?
  MachineUserID              String
  MachineID                  String
  ServiceParameters          String
  ServiceCompletion          Boolean
  Timestamp                  DateTime
  CleaningRequired           Boolean   @default(false)
  ProcessControlFrequency    String
}

model Machine {
  id          String @id @default(uuid())
  MachineName String
}

model TechnicalParameter {
  id             String @id @default(uuid())
  MachineID      String
  ParameterName  String
  ParameterValue String
}

model CustomerFault {
  CustomerID String
  FaultID    String

  @@id([CustomerID, FaultID])
}

enum UserRole {
  ADMIN
  SUPER
  NORMAL
  TECH
}

enum UserStatus {
  ACTIVE
  PASSIVE
}

enum OfferStatus {
  SENT
  PENDING
  ACCEPTED
  REJECTED
}

enum Currency {
  TL
  USD
}

enum CardType {
  ALICI_SATICI
  ALICI
  SATICI
}
