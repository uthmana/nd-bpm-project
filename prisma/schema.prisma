// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Todo {
  id        String   @id @default(uuid())
  title     String
  complete  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String?      @unique
  password      String?
  role          UserRole     @default(NORMAL)
  status        UserStatus   @default(ACTIVE) // Set the default status to "ACTIVE"
  address       Address? // Added address field
  contactInfo   ContactInfo? // Added contactInfo field
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  userType      UserType?    @default(CUSTOMER) // Added userType field

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  SUPER
  NORMAL
  TECH
  // Add more roles as needed
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  // Add more statuses as needed
}

model Address {
  id      String  @id @default(cuid())
  street  String
  city    String
  state   String
  zipCode String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @unique @default(cuid())
}

model ContactInfo {
  id     String @id @default(cuid())
  phone  String
  email  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @default(cuid())
}

enum UserType {
  CUSTOMER
  NON_CUSTOMER
  // Add more user types as needed
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String?  @unique
  password    String?
  roleId      UserRole @default(NORMAL)
  PostalCode  String?
  address     String?
  phoneNumber String?
}
