generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL")
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String       @id @default(cuid())
  name            String
  email           String?      @unique
  password        String?
  role            UserRole     @default(NORMAL)
  status          UserStatus   @default(ACTIVE)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  token           String?      @unique
  tokenExpiryDate DateTime?
  address         Address?
  contactInfo     ContactInfo?

  @@map("users")
}

model Address {
  id      String  @id @default(cuid())
  street  String
  city    String
  state   String
  zipCode String
  userId  String? @unique @default(cuid())
  user    User?   @relation(fields: [userId], references: [id])
}

model ContactInfo {
  id     String @id @default(cuid())
  phone  String
  email  String
  userId String @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
}

model Customer {
  id            String    @id @default(cuid())
  code          String?
  cardType      CardType? @default(ALICI_SATICI)
  taxNo         String?
  company_name  String?
  address       String?
  postalCode    String?
  phoneNumber   String?
  phoneNumber2  String?
  tax_Office    String?
  taxOfficeCode String?
  email         String?
  email_2       String?
  rep_name      String
  currency      Currency? @default(TL)
  country_code  String
  province_code String
  district_code String
  definition    String?
  Offers        Offer[]
  Fault         Fault[]
  Stock         Stock[]

  @@map("customers")
}

model Stock {
  id              String    @id @default(cuid())
  product_code    String
  product_name    String
  product_barcode String?
  description     String?
  main_group      String?
  group1          String?
  group2          String?
  inventory       Int?
  unit            String?
  current_price   String
  curency         String
  brand           String?
  date            DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  image           String?
  customerId      String?
  customer        Customer? @relation(fields: [customerId], references: [id])
}

//TODO: add stock relation 
model Offer {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  status     OfferStatus @default(PENDING)
  customerId String
  Customer   Customer    @relation(fields: [customerId], references: [id])
}

model Fault {
  id                         String        @id @default(cuid())
  customerName               String?
  traceabilityCode           String
  arrivalDate                DateTime?     @default(now())
  invoiceDate                DateTime?
  product                    String?
  quantity                   Int?
  productCode                String?
  productBatchNumber         String?
  application                String?
  standard                   String?
  color                      String?
  faultDescription           String?
  status                     FaultStatus   @default(PENDING)
  technicalDrawingAttachment String?
  controlInfo                String?
  faultControl               FaultControl? @relation(fields: [faultControlId], references: [id])
  customerId                 String?
  Customer                   Customer?     @relation(fields: [customerId], references: [id])
  faultControlId             String?       @unique
  Invoice                    Invoice[]
}

model FaultControl {
  id                    String             @id @default(cuid())
  faultId               String
  customerName          String?
  traceabilityCode      String?
  arrivalDate           DateTime?
  invoiceDate           DateTime?
  product               String?
  quantity              Int?
  productCode           String?
  productBatchNumber    String?
  plating               String? // red-kap,blue-kap
  controlDate           DateTime?          @default(now())
  image                 String?
  productDimension      String?
  dimensionConfirmation Boolean?
  quantityConfirmation  Boolean?
  dirtyThreads          Boolean?           @default(false)
  processFrequency      String? //yazilsin-yazilmasin
  remarks               String?
  result                FaultControlResult
  Fault                 Fault[]
}

model Machine {
  id            String          @id @default(cuid())
  machine_Name  String
  machineParams MachineParams[]
}

model MachineParams {
  id           String  @id @default(cuid())
  param_name   String?
  display_name String?

  Machine   Machine? @relation(fields: [machineId], references: [id])
  machineId String?
}

model TechnicalParameter {
  id                     String  @id @default(cuid())
  viskozite              String?
  besleme_Tipi           String?
  besleme_Hizi           String?
  makine_Hizi            String?
  hava_Basinci           String?
  firin_Bant_Hizi        String?
  induksiyon_kW          String?
  induksiyon_Volts       String?
  induksiyon_kHz         String?
  patch_Vibrasyon_hizi   String?
  patch_Hava_Basinci     String?
  patch_Toz_yukleme_Hizi String?
  teach_Ayari            String?
  delay_Ayari            String?
  purge_Ayari            String?
  testere_secimi         String?
  kesim_Mesafesi         String?
  yuva_Boyutu            String?
  machineId              String? @unique

  Process   Process? @relation(fields: [processId], references: [id])
  processId String?
}

model Process {
  id                         String   @id @default(cuid())
  faultId                    String   @unique
  customerName               String?
  product                    String?
  quantity                   Int?
  productCode                String?
  application                String?
  standard                   String?
  color                      String?
  technicalDrawingAttachment String?
  machineName                String?
  machineId                  String?  @unique
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  status          ProcessStatus        @default(PENDING)
  technicalParams TechnicalParameter[]
}

model FinalControl {
  id                    String             @id @default(cuid())
  olcu_Kontrol          String?
  gorunum_kontrol       String?
  tork_Kontrol          String?
  paketleme             String?
  kontrol_edilen_miktar String?
  hatali_miktar         String?
  remarks               String?
  result                FaultControlResult
}

model Invoice {
  id          String   @id @default(cuid())
  faultId     String
  invoiceDate DateTime @default(now())
  totalAmount Float
  fault       Fault    @relation(fields: [faultId], references: [id])
}

model Notification {
  id          String        @id @default(cuid())
  title       String?
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  receiver    NotifReceiver @default(NORMAL)
  link        String?
  status      NotifStatus   @default(NOT_READ)
}

enum NotifStatus {
  READ
  NOT_READ
}

enum NotifReceiver {
  SUPER
  NORMAL
  TECH
  OTHER
}

enum FaultControlResult {
  ACCEPT
  ACCEPTANCE_WITH_CONDITION
  PRE_PROCESS
  REJECT
}

enum FaultStatus {
  PENDING
  ACCEPT
  ACCEPTANCE_WITH_CONDITION
  PRE_PROCESS
  REJECT
}

model Applications {
  id   String @id @default(cuid())
  Name String
}

model Colors {
  id   String @id @default(cuid())
  name String
}

model Standards {
  id   String @id @default(cuid())
  name String
}

enum UserRole {
  ADMIN
  SUPER
  NORMAL
  TECH
}

enum UserStatus {
  ACTIVE
  PASSIVE
}

enum OfferStatus {
  SENT
  PENDING
  ACCEPTED
  REJECTED
}

enum Currency {
  TL
  USD
  EUR
}

enum CardType {
  ALICI_SATICI
  ALICI
  SATICI
}

enum ProcessStatus {
  PENDING
  PROCESSING
  FINISHED
}
